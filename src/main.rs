//! Demonstrates the most barebone usage of the Rerun SDK.

use rerun::external::glam;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let rec = rerun::RecordingStreamBuilder::new("morten code order").spawn()?;

    let points = [
        glam::vec3(3.00, 9.00, 9.00),
        glam::vec3(3.00, 9.00, 10.00),
        glam::vec3(3.00, 9.00, 11.00),
        glam::vec3(3.00, 10.00, 9.00),
        glam::vec3(3.00, 11.00, 9.00),
        glam::vec3(3.00, 10.00, 10.00),
        glam::vec3(3.00, 10.00, 11.00),
        glam::vec3(3.00, 11.00, 10.00),
        glam::vec3(3.00, 11.00, 11.00),
        glam::vec3(4.00, 8.00, 9.00),
        glam::vec3(4.00, 9.00, 8.00),
        glam::vec3(4.00, 9.00, 9.00),
        glam::vec3(5.00, 8.00, 9.00),
        glam::vec3(5.00, 9.00, 8.00),
        glam::vec3(5.00, 9.00, 9.00),
        glam::vec3(4.00, 8.00, 10.00),
        glam::vec3(4.00, 8.00, 11.00),
        glam::vec3(4.00, 9.00, 10.00),
        glam::vec3(4.00, 9.00, 11.00),
        glam::vec3(5.00, 8.00, 10.00),
        glam::vec3(5.00, 8.00, 11.00),
        glam::vec3(5.00, 9.00, 10.00),
        glam::vec3(5.00, 9.00, 11.00),
        glam::vec3(4.00, 10.00, 8.00),
        glam::vec3(4.00, 10.00, 9.00),
        glam::vec3(4.00, 11.00, 8.00),
        glam::vec3(4.00, 11.00, 9.00),
        glam::vec3(5.00, 10.00, 8.00),
        glam::vec3(5.00, 10.00, 9.00),
        glam::vec3(5.00, 11.00, 8.00),
        glam::vec3(5.00, 11.00, 9.00),
        glam::vec3(4.00, 10.00, 10.00),
        glam::vec3(4.00, 10.00, 11.00),
        glam::vec3(4.00, 11.00, 10.00),
        glam::vec3(4.00, 11.00, 11.00),
        glam::vec3(5.00, 10.00, 10.00),
        glam::vec3(5.00, 10.00, 11.00),
        glam::vec3(5.00, 11.00, 10.00),
        glam::vec3(5.00, 11.00, 11.00),
        glam::vec3(6.00, 8.00, 9.00),
        glam::vec3(6.00, 9.00, 8.00),
        glam::vec3(6.00, 9.00, 9.00),
        glam::vec3(7.00, 9.00, 9.00),
        glam::vec3(6.00, 8.00, 10.00),
        glam::vec3(6.00, 8.00, 11.00),
        glam::vec3(6.00, 9.00, 10.00),
        glam::vec3(6.00, 9.00, 11.00),
        glam::vec3(7.00, 9.00, 10.00),
        glam::vec3(7.00, 9.00, 11.00),
        glam::vec3(6.00, 10.00, 8.00),
        glam::vec3(6.00, 10.00, 9.00),
        glam::vec3(6.00, 11.00, 8.00),
        glam::vec3(6.00, 11.00, 9.00),
        glam::vec3(7.00, 10.00, 9.00),
        glam::vec3(7.00, 11.00, 9.00),
        glam::vec3(6.00, 10.00, 10.00),
        glam::vec3(6.00, 10.00, 11.00),
        glam::vec3(6.00, 11.00, 10.00),
        glam::vec3(6.00, 11.00, 11.00),
        glam::vec3(7.00, 10.00, 10.00),
        glam::vec3(7.00, 10.00, 11.00),
        glam::vec3(7.00, 11.00, 10.00),
        glam::vec3(7.00, 11.00, 11.00),
        glam::vec3(4.00, 9.00, 12.00),
        glam::vec3(5.00, 9.00, 12.00),
        glam::vec3(4.00, 10.00, 12.00),
        glam::vec3(4.00, 11.00, 12.00),
        glam::vec3(5.00, 10.00, 12.00),
        glam::vec3(5.00, 11.00, 12.00),
        glam::vec3(6.00, 9.00, 12.00),
        glam::vec3(6.00, 10.00, 12.00),
        glam::vec3(6.00, 11.00, 12.00),
        glam::vec3(4.00, 12.00, 9.00),
        glam::vec3(5.00, 12.00, 9.00),
        glam::vec3(4.00, 12.00, 10.00),
        glam::vec3(4.00, 12.00, 11.00),
        glam::vec3(5.00, 12.00, 10.00),
        glam::vec3(5.00, 12.00, 11.00),
        glam::vec3(6.00, 12.00, 9.00),
        glam::vec3(6.00, 12.00, 10.00),
        glam::vec3(6.00, 12.00, 11.00),
        glam::vec3(8.00, 9.00, 9.00),
        glam::vec3(9.00, 9.00, 9.00),
        glam::vec3(8.00, 9.00, 10.00),
        glam::vec3(8.00, 9.00, 11.00),
        glam::vec3(9.00, 9.00, 10.00),
        glam::vec3(9.00, 9.00, 11.00),
        glam::vec3(8.00, 10.00, 9.00),
        glam::vec3(8.00, 11.00, 9.00),
        glam::vec3(9.00, 10.00, 9.00),
        glam::vec3(9.00, 11.00, 9.00),
        glam::vec3(8.00, 10.00, 10.00),
        glam::vec3(8.00, 10.00, 11.00),
        glam::vec3(8.00, 11.00, 10.00),
        glam::vec3(8.00, 11.00, 11.00),
        glam::vec3(9.00, 10.00, 10.00),
        glam::vec3(9.00, 10.00, 11.00),
        glam::vec3(9.00, 11.00, 10.00),
        glam::vec3(9.00, 11.00, 11.00),
        glam::vec3(10.00, 9.00, 9.00),
        glam::vec3(11.00, 9.00, 9.00),
        glam::vec3(10.00, 9.00, 10.00),
        glam::vec3(10.00, 9.00, 11.00),
        glam::vec3(11.00, 9.00, 10.00),
        glam::vec3(11.00, 9.00, 11.00),
        glam::vec3(10.00, 10.00, 9.00),
        glam::vec3(10.00, 11.00, 9.00),
        glam::vec3(11.00, 10.00, 9.00),
        glam::vec3(11.00, 11.00, 9.00),
        glam::vec3(10.00, 10.00, 10.00),
        glam::vec3(10.00, 10.00, 11.00),
        glam::vec3(10.00, 11.00, 10.00),
        glam::vec3(10.00, 11.00, 11.00),
        glam::vec3(11.00, 10.00, 10.00),
        glam::vec3(11.00, 10.00, 11.00),
        glam::vec3(11.00, 11.00, 10.00),
        glam::vec3(11.00, 11.00, 11.00),
        glam::vec3(12.00, 9.00, 9.00),
        glam::vec3(13.00, 9.00, 9.00),
        glam::vec3(12.00, 9.00, 10.00),
        glam::vec3(12.00, 9.00, 11.00),
        glam::vec3(13.00, 9.00, 10.00),
        glam::vec3(13.00, 9.00, 11.00),
        glam::vec3(12.00, 10.00, 9.00),
        glam::vec3(12.00, 11.00, 9.00),
        glam::vec3(13.00, 10.00, 9.00),
        glam::vec3(13.00, 11.00, 9.00),
        glam::vec3(12.00, 10.00, 10.00),
        glam::vec3(12.00, 10.00, 11.00),
        glam::vec3(12.00, 11.00, 10.00),
        glam::vec3(12.00, 11.00, 11.00),
        glam::vec3(13.00, 10.00, 10.00),
        glam::vec3(13.00, 10.00, 11.00),
        glam::vec3(13.00, 11.00, 10.00),
        glam::vec3(13.00, 11.00, 11.00),
        glam::vec3(14.00, 8.00, 9.00),
        glam::vec3(14.00, 9.00, 8.00),
        glam::vec3(14.00, 9.00, 9.00),
        glam::vec3(15.00, 8.00, 9.00),
        glam::vec3(15.00, 9.00, 8.00),
        glam::vec3(15.00, 9.00, 9.00),
        glam::vec3(14.00, 8.00, 10.00),
        glam::vec3(14.00, 8.00, 11.00),
        glam::vec3(14.00, 9.00, 10.00),
        glam::vec3(14.00, 9.00, 11.00),
        glam::vec3(15.00, 8.00, 10.00),
        glam::vec3(15.00, 8.00, 11.00),
        glam::vec3(15.00, 9.00, 10.00),
        glam::vec3(15.00, 9.00, 11.00),
        glam::vec3(14.00, 10.00, 8.00),
        glam::vec3(14.00, 10.00, 9.00),
        glam::vec3(14.00, 11.00, 8.00),
        glam::vec3(14.00, 11.00, 9.00),
        glam::vec3(15.00, 10.00, 8.00),
        glam::vec3(15.00, 10.00, 9.00),
        glam::vec3(15.00, 11.00, 8.00),
        glam::vec3(15.00, 11.00, 9.00),
        glam::vec3(14.00, 10.00, 10.00),
        glam::vec3(14.00, 10.00, 11.00),
        glam::vec3(14.00, 11.00, 10.00),
        glam::vec3(14.00, 11.00, 11.00),
        glam::vec3(15.00, 10.00, 10.00),
        glam::vec3(15.00, 10.00, 11.00),
        glam::vec3(15.00, 11.00, 10.00),
        glam::vec3(15.00, 11.00, 11.00),
        glam::vec3(14.00, 9.00, 12.00),
        glam::vec3(15.00, 9.00, 12.00),
        glam::vec3(14.00, 10.00, 12.00),
        glam::vec3(14.00, 11.00, 12.00),
        glam::vec3(15.00, 10.00, 12.00),
        glam::vec3(15.00, 11.00, 12.00),
        glam::vec3(14.00, 12.00, 9.00),
        glam::vec3(15.00, 12.00, 9.00),
        glam::vec3(14.00, 12.00, 10.00),
        glam::vec3(14.00, 12.00, 11.00),
        glam::vec3(15.00, 12.00, 10.00),
        glam::vec3(15.00, 12.00, 11.00),
        glam::vec3(16.00, 8.00, 9.00),
        glam::vec3(16.00, 9.00, 8.00),
        glam::vec3(16.00, 9.00, 9.00),
        glam::vec3(17.00, 9.00, 9.00),
        glam::vec3(16.00, 8.00, 10.00),
        glam::vec3(16.00, 8.00, 11.00),
        glam::vec3(16.00, 9.00, 10.00),
        glam::vec3(16.00, 9.00, 11.00),
        glam::vec3(17.00, 9.00, 10.00),
        glam::vec3(17.00, 9.00, 11.00),
        glam::vec3(16.00, 10.00, 8.00),
        glam::vec3(16.00, 10.00, 9.00),
        glam::vec3(16.00, 11.00, 8.00),
        glam::vec3(16.00, 11.00, 9.00),
        glam::vec3(17.00, 10.00, 9.00),
        glam::vec3(17.00, 11.00, 9.00),
        glam::vec3(16.00, 10.00, 10.00),
        glam::vec3(16.00, 10.00, 11.00),
        glam::vec3(16.00, 11.00, 10.00),
        glam::vec3(16.00, 11.00, 11.00),
        glam::vec3(17.00, 10.00, 10.00),
        glam::vec3(17.00, 10.00, 11.00),
        glam::vec3(17.00, 11.00, 10.00),
        glam::vec3(17.00, 11.00, 11.00),
        glam::vec3(16.00, 9.00, 12.00),
        glam::vec3(16.00, 10.00, 12.00),
        glam::vec3(16.00, 11.00, 12.00),
        glam::vec3(16.00, 12.00, 9.00),
        glam::vec3(16.00, 12.00, 10.00),
        glam::vec3(16.00, 12.00, 11.00),
    ];
    let colors = [
        rerun::Color::from_u32(0x800627ff),
        rerun::Color::from_u32(0x80062eff),
        rerun::Color::from_u32(0x80062fff),
        rerun::Color::from_u32(0x800635ff),
        rerun::Color::from_u32(0x800637ff),
        rerun::Color::from_u32(0x80063cff),
        rerun::Color::from_u32(0x80063dff),
        rerun::Color::from_u32(0x80063eff),
        rerun::Color::from_u32(0x80063fff),
        rerun::Color::from_u32(0x800701ff),
        rerun::Color::from_u32(0x800702ff),
        rerun::Color::from_u32(0x800703ff),
        rerun::Color::from_u32(0x800705ff),
        rerun::Color::from_u32(0x800706ff),
        rerun::Color::from_u32(0x800707ff),
        rerun::Color::from_u32(0x800708ff),
        rerun::Color::from_u32(0x800709ff),
        rerun::Color::from_u32(0x80070aff),
        rerun::Color::from_u32(0x80070bff),
        rerun::Color::from_u32(0x80070cff),
        rerun::Color::from_u32(0x80070dff),
        rerun::Color::from_u32(0x80070eff),
        rerun::Color::from_u32(0x80070fff),
        rerun::Color::from_u32(0x800710ff),
        rerun::Color::from_u32(0x800711ff),
        rerun::Color::from_u32(0x800712ff),
        rerun::Color::from_u32(0x800713ff),
        rerun::Color::from_u32(0x800714ff),
        rerun::Color::from_u32(0x800715ff),
        rerun::Color::from_u32(0x800716ff),
        rerun::Color::from_u32(0x800717ff),
        rerun::Color::from_u32(0x800718ff),
        rerun::Color::from_u32(0x800719ff),
        rerun::Color::from_u32(0x80071aff),
        rerun::Color::from_u32(0x80071bff),
        rerun::Color::from_u32(0x80071cff),
        rerun::Color::from_u32(0x80071dff),
        rerun::Color::from_u32(0x80071eff),
        rerun::Color::from_u32(0x80071fff),
        rerun::Color::from_u32(0x800721ff),
        rerun::Color::from_u32(0x800722ff),
        rerun::Color::from_u32(0x800723ff),
        rerun::Color::from_u32(0x800727ff),
        rerun::Color::from_u32(0x800728ff),
        rerun::Color::from_u32(0x800729ff),
        rerun::Color::from_u32(0x80072aff),
        rerun::Color::from_u32(0x80072bff),
        rerun::Color::from_u32(0x80072eff),
        rerun::Color::from_u32(0x80072fff),
        rerun::Color::from_u32(0x800730ff),
        rerun::Color::from_u32(0x800731ff),
        rerun::Color::from_u32(0x800732ff),
        rerun::Color::from_u32(0x800733ff),
        rerun::Color::from_u32(0x800735ff),
        rerun::Color::from_u32(0x800737ff),
        rerun::Color::from_u32(0x800738ff),
        rerun::Color::from_u32(0x800739ff),
        rerun::Color::from_u32(0x80073aff),
        rerun::Color::from_u32(0x80073bff),
        rerun::Color::from_u32(0x80073cff),
        rerun::Color::from_u32(0x80073dff),
        rerun::Color::from_u32(0x80073eff),
        rerun::Color::from_u32(0x80073fff),
        rerun::Color::from_u32(0x800742ff),
        rerun::Color::from_u32(0x800746ff),
        rerun::Color::from_u32(0x800750ff),
        rerun::Color::from_u32(0x800752ff),
        rerun::Color::from_u32(0x800754ff),
        rerun::Color::from_u32(0x800756ff),
        rerun::Color::from_u32(0x800762ff),
        rerun::Color::from_u32(0x800770ff),
        rerun::Color::from_u32(0x800772ff),
        rerun::Color::from_u32(0x800781ff),
        rerun::Color::from_u32(0x800785ff),
        rerun::Color::from_u32(0x800788ff),
        rerun::Color::from_u32(0x800789ff),
        rerun::Color::from_u32(0x80078cff),
        rerun::Color::from_u32(0x80078dff),
        rerun::Color::from_u32(0x8007a1ff),
        rerun::Color::from_u32(0x8007a8ff),
        rerun::Color::from_u32(0x8007a9ff),
        rerun::Color::from_u32(0x800e03ff),
        rerun::Color::from_u32(0x800e07ff),
        rerun::Color::from_u32(0x800e0aff),
        rerun::Color::from_u32(0x800e0bff),
        rerun::Color::from_u32(0x800e0eff),
        rerun::Color::from_u32(0x800e0fff),
        rerun::Color::from_u32(0x800e11ff),
        rerun::Color::from_u32(0x800e13ff),
        rerun::Color::from_u32(0x800e15ff),
        rerun::Color::from_u32(0x800e17ff),
        rerun::Color::from_u32(0x800e18ff),
        rerun::Color::from_u32(0x800e19ff),
        rerun::Color::from_u32(0x800e1aff),
        rerun::Color::from_u32(0x800e1bff),
        rerun::Color::from_u32(0x800e1cff),
        rerun::Color::from_u32(0x800e1dff),
        rerun::Color::from_u32(0x800e1eff),
        rerun::Color::from_u32(0x800e1fff),
        rerun::Color::from_u32(0x800e23ff),
        rerun::Color::from_u32(0x800e27ff),
        rerun::Color::from_u32(0x800e2aff),
        rerun::Color::from_u32(0x800e2bff),
        rerun::Color::from_u32(0x800e2eff),
        rerun::Color::from_u32(0x800e2fff),
        rerun::Color::from_u32(0x800e31ff),
        rerun::Color::from_u32(0x800e33ff),
        rerun::Color::from_u32(0x800e35ff),
        rerun::Color::from_u32(0x800e37ff),
        rerun::Color::from_u32(0x800e38ff),
        rerun::Color::from_u32(0x800e39ff),
        rerun::Color::from_u32(0x800e3aff),
        rerun::Color::from_u32(0x800e3bff),
        rerun::Color::from_u32(0x800e3cff),
        rerun::Color::from_u32(0x800e3dff),
        rerun::Color::from_u32(0x800e3eff),
        rerun::Color::from_u32(0x800e3fff),
        rerun::Color::from_u32(0x800f03ff),
        rerun::Color::from_u32(0x800f07ff),
        rerun::Color::from_u32(0x800f0aff),
        rerun::Color::from_u32(0x800f0bff),
        rerun::Color::from_u32(0x800f0eff),
        rerun::Color::from_u32(0x800f0fff),
        rerun::Color::from_u32(0x800f11ff),
        rerun::Color::from_u32(0x800f13ff),
        rerun::Color::from_u32(0x800f15ff),
        rerun::Color::from_u32(0x800f17ff),
        rerun::Color::from_u32(0x800f18ff),
        rerun::Color::from_u32(0x800f19ff),
        rerun::Color::from_u32(0x800f1aff),
        rerun::Color::from_u32(0x800f1bff),
        rerun::Color::from_u32(0x800f1cff),
        rerun::Color::from_u32(0x800f1dff),
        rerun::Color::from_u32(0x800f1eff),
        rerun::Color::from_u32(0x800f1fff),
        rerun::Color::from_u32(0x800f21ff),
        rerun::Color::from_u32(0x800f22ff),
        rerun::Color::from_u32(0x800f23ff),
        rerun::Color::from_u32(0x800f25ff),
        rerun::Color::from_u32(0x800f26ff),
        rerun::Color::from_u32(0x800f27ff),
        rerun::Color::from_u32(0x800f28ff),
        rerun::Color::from_u32(0x800f29ff),
        rerun::Color::from_u32(0x800f2aff),
        rerun::Color::from_u32(0x800f2bff),
        rerun::Color::from_u32(0x800f2cff),
        rerun::Color::from_u32(0x800f2dff),
        rerun::Color::from_u32(0x800f2eff),
        rerun::Color::from_u32(0x800f2fff),
        rerun::Color::from_u32(0x800f30ff),
        rerun::Color::from_u32(0x800f31ff),
        rerun::Color::from_u32(0x800f32ff),
        rerun::Color::from_u32(0x800f33ff),
        rerun::Color::from_u32(0x800f34ff),
        rerun::Color::from_u32(0x800f35ff),
        rerun::Color::from_u32(0x800f36ff),
        rerun::Color::from_u32(0x800f37ff),
        rerun::Color::from_u32(0x800f38ff),
        rerun::Color::from_u32(0x800f39ff),
        rerun::Color::from_u32(0x800f3aff),
        rerun::Color::from_u32(0x800f3bff),
        rerun::Color::from_u32(0x800f3cff),
        rerun::Color::from_u32(0x800f3dff),
        rerun::Color::from_u32(0x800f3eff),
        rerun::Color::from_u32(0x800f3fff),
        rerun::Color::from_u32(0x800f62ff),
        rerun::Color::from_u32(0x800f66ff),
        rerun::Color::from_u32(0x800f70ff),
        rerun::Color::from_u32(0x800f72ff),
        rerun::Color::from_u32(0x800f74ff),
        rerun::Color::from_u32(0x800f76ff),
        rerun::Color::from_u32(0x800fa1ff),
        rerun::Color::from_u32(0x800fa5ff),
        rerun::Color::from_u32(0x800fa8ff),
        rerun::Color::from_u32(0x800fa9ff),
        rerun::Color::from_u32(0x800facff),
        rerun::Color::from_u32(0x800fadff),
        rerun::Color::from_u32(0x804601ff),
        rerun::Color::from_u32(0x804602ff),
        rerun::Color::from_u32(0x804603ff),
        rerun::Color::from_u32(0x804607ff),
        rerun::Color::from_u32(0x804608ff),
        rerun::Color::from_u32(0x804609ff),
        rerun::Color::from_u32(0x80460aff),
        rerun::Color::from_u32(0x80460bff),
        rerun::Color::from_u32(0x80460eff),
        rerun::Color::from_u32(0x80460fff),
        rerun::Color::from_u32(0x804610ff),
        rerun::Color::from_u32(0x804611ff),
        rerun::Color::from_u32(0x804612ff),
        rerun::Color::from_u32(0x804613ff),
        rerun::Color::from_u32(0x804615ff),
        rerun::Color::from_u32(0x804617ff),
        rerun::Color::from_u32(0x804618ff),
        rerun::Color::from_u32(0x804619ff),
        rerun::Color::from_u32(0x80461aff),
        rerun::Color::from_u32(0x80461bff),
        rerun::Color::from_u32(0x80461cff),
        rerun::Color::from_u32(0x80461dff),
        rerun::Color::from_u32(0x80461eff),
        rerun::Color::from_u32(0x80461fff),
        rerun::Color::from_u32(0x804642ff),
        rerun::Color::from_u32(0x804650ff),
        rerun::Color::from_u32(0x804652ff),
        rerun::Color::from_u32(0x804681ff),
        rerun::Color::from_u32(0x804688ff),
        rerun::Color::from_u32(0x804689ff),
    ];

    // Skew the points so that the circles are stacked
    let cos_30 = 30.0_f32.to_radians().cos();
    let mut z_axis = glam::vec3(0.5, cos_30 / 3.0, 0.0);
    z_axis.z = (1.0 - z_axis.x * z_axis.x - z_axis.y * z_axis.y).sqrt();
    let skewed_from_straight =
        glam::Mat3::from_cols_array_2d(&[[1.0, 0.0, 0.0], [0.5, cos_30, 0.0], z_axis.into()]);
    let skewed_points = points
        .iter()
        .map(|p| skewed_from_straight * *p)
        .collect::<Vec<_>>();
    rec.log(
        "my_points",
        &rerun::Points3D::new(skewed_points.clone())
            .with_colors(colors)
            .with_radii([0.5]),
    )?;
    rec.log(
        "lines",
        &rerun::LineStrips3D::new([skewed_points]).with_colors(colors),
    )?;
    rec.log(
        "axes",
        &rerun::Arrows3D::from_vectors([
            skewed_from_straight.x_axis,
            skewed_from_straight.y_axis,
            skewed_from_straight.z_axis,
        ])
        .with_colors([
            rerun::Color::from_u32(0xaa0000ff),
            rerun::Color::from_u32(0x00aa00ff),
            rerun::Color::from_u32(0x0000aaff),
        ])
        .with_origins([glam::vec3(11.0, 9.0, 6.0); 3]),
    )?;

    Ok(())
}
